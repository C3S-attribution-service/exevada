## PostgreSQL of SQLite

This project uses PostgreSQL, but it entirely possible to use SQLite
instead. The difference will be a trade-off between ease of
installation (and adminstration) and speed: PostgreSQL handles large
amount of data much better, and can scale accordingly (with provided
hardware), while SQLite is very easy for a quick setup and test run.

Both are extensively used world-wide, and support in the form of
documentation or questions and answers on forums is
plentiful. PostgreSQL supports, among others, more data types for its
database tables, which in some cases can be useful, but this is not
needed for this project.

## Database installation

The project uses Django and a suitable database, such as PostgreSQL or
SQLite. Most package managers provide easy installation of PostgreSQL,
while SQLite generally comes with Python. Make sure to install the
server package for PostgreSQL, not (only) the client.

Since the project uses the GeoDjango extension of Django (which is
built-in), you also need a compatible database extension. For
PostgreSQL, this is Postgis, while for SQLite, this is
Spatialite. Both of these require a set of geospatial libraries: GEOS,
PROJ.4 and GDAL most notably.

When using PostgreSQL with Django, in particular GeoDjango, the
Psycopg2 library is needed for the interface between Django (Python)
and PostgreSQL. For SQLite, no extra library is needed.


A proper package manager will take care of all the dependencies, and
you should be able to install just SpatiaLite or Postgis +
Psycopg2. On recent Ubuntu versions, use:

        sudo apt install libSQLite-mod-spatialite

or

        sudo apt install postgis


(Replace 'install' with 'depends' to see which dependencies will be
installed.)

For Postgis, you'll need to create a database and the Postgis
extension inside that database:

        $ createdb  <db name>
        $ psql <db name>
        > CREATE EXTENSION postgis;


Many more details, including for other platforms, see the GeoDjango
installation documentation at
https://docs.djangoproject.com/en/3.0/ref/contrib/gis/install/ .


## Django installation

Once your database system is installed and set up, install
Django. Since this project uses Django version 3.0, you very likely
need to use Python's package manager instead of your system's package
manager, as this is a fairly recent version (as of April 2020) of
Django:

        sudo python3 -m pip install Django django-nested-inline

In case you are using PostgreSQL, install the Psycopg2 library as well:

        sudo python3 -m pip install psycopg2


## Conda installation

In case you prefer Conda, you can set up a new environment as follows:

        conda create -n exevada django libspatialite python=3.8

for the SQLite variant, and

        conda create -n exevada -c conda-forge  django postgis psycopg2 python=3.8

for the PostgreSQL variant.


## Dockerfile

There is also a `docker/Dockerfile` file that can be used, either as a
guide line for the installation, or for building the Dockerfile
instead. From the base directory:

        docker build docker
