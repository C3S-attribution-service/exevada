# Generated by Django 3.1.1 on 2020-12-17 22:30

import django.contrib.gis.db.models.fields
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Attribution',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('PR', models.FloatField(default=0.0, help_text='Probability ratio', validators=[django.core.validators.MinValueValidator(0.0)])),
                ('PR_min', models.FloatField(blank=True, help_text='Probability ratio lower bound', null=True)),
                ('PR_max', models.FloatField(blank=True, help_text='Probability ratio upper bound', null=True)),
                ('Delta_I', models.FloatField(default=0.0, help_text='Intensity change', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('Delta_I_min', models.FloatField(blank=True, help_text='Intensity change lower bound', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('Delta_I_max', models.FloatField(blank=True, help_text='Intensity change upper bound', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('comments', models.TextField(blank=True, help_text='Remarks')),
                ('attribution_request', models.TextField(blank=True, help_text='Request for attribution')),
                ('description', models.CharField(help_text='Short descriptive string', max_length=256, unique=True)),
                ('return_period', models.PositiveIntegerField(help_text='Rounded return period (yr)', null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('conclusions', models.TextField(blank=True, help_text='Synthesis conclusions')),
                ('contact', models.CharField(blank=True, help_text='Contact email adress', max_length=1024)),
                ('webpage', models.URLField(blank=True, default='https://attribution.climate.copernicus.eu', help_text='Relevant web page', max_length=512)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AttributionVariable',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('short_name', models.CharField(help_text='Abbreviated variable name', max_length=16)),
                ('long_name', models.CharField(blank=True, help_text='Full variable name', max_length=128)),
                ('description', models.TextField(blank=True, help_text='Description')),
                ('unit', models.CharField(blank=True, help_text='Unit of the variable', max_length=64)),
                ('unit_symbol', models.CharField(blank=True, help_text='Unit symbol of the variable', max_length=16)),
                ('delta_I_unit_symbol', models.CharField(blank=True, help_text='Unit symbol of intensity change', max_length=16)),
            ],
        ),
        migrations.CreateModel(
            name='DistributionType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Distribution name', max_length=128, unique=True)),
                ('abbreviation', models.CharField(blank=True, help_text='Abbreviation', max_length=32)),
                ('has_shape_parameter', models.BooleanField(help_text='Does the distribution contain tuneable shape parameter')),
            ],
        ),
        migrations.CreateModel(
            name='EventType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Event type', max_length=32, unique=True)),
                ('description', models.TextField(blank=True)),
                ('icon', models.ImageField(blank=True, upload_to='img/')),
            ],
        ),
        migrations.CreateModel(
            name='JournalPaper',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Publication title', max_length=1024)),
                ('doi', models.CharField(blank=True, help_text='DOI (no URL) of related publication', max_length=256)),
                ('authors', models.CharField(help_text='Author list', max_length=1024)),
                ('date', models.DateField(help_text='Publication date')),
                ('url', models.URLField(blank=True, max_length=512)),
                ('journal', models.CharField(help_text='Journal', max_length=256)),
                ('issue', models.IntegerField(blank=True, help_text='Issue', null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Location name', max_length=256)),
                ('area', django.contrib.gis.db.models.fields.GeometryField(help_text='Geographic location or region', srid=4326)),
                ('description', models.TextField(blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='PressCommunication',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Publication title', max_length=1024)),
                ('doi', models.CharField(blank=True, help_text='DOI (no URL) of related publication', max_length=256)),
                ('authors', models.CharField(help_text='Author list', max_length=1024)),
                ('date', models.DateField(help_text='Publication date')),
                ('url', models.URLField(blank=True, max_length=512)),
                ('medium', models.CharField(help_text='Medium', max_length=256)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='StatisticalMethod',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the method', max_length=32, unique=True)),
                ('description', models.TextField(blank=True, help_text='Short description of the method')),
                ('covariate', models.CharField(help_text='Proxy for anthropogenic forcing', max_length=32)),
                ('dispersion_fit', models.BooleanField(help_text='Does the method fit the dispersion (sigma/mu) or scale (sigma) parameter?')),
            ],
        ),
        migrations.CreateModel(
            name='ObservationDataSet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Observation dataset', max_length=256)),
                ('url', models.URLField(blank=True, max_length=512)),
                ('description', models.TextField(blank=True, help_text='Dataset description')),
                ('doi', models.CharField(blank=True, help_text='DOI of dataset', max_length=256)),
                ('papers', models.ManyToManyField(blank=True, help_text='Reviewed papers describing the attribution', to='exevada.JournalPaper')),
            ],
        ),
        migrations.CreateModel(
            name='ObservationAnalysis',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('PR', models.FloatField(default=0.0, help_text='Probability ratio', validators=[django.core.validators.MinValueValidator(0.0)])),
                ('PR_min', models.FloatField(blank=True, help_text='Probability ratio lower bound', null=True)),
                ('PR_max', models.FloatField(blank=True, help_text='Probability ratio upper bound', null=True)),
                ('Delta_I', models.FloatField(default=0.0, help_text='Intensity change', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('Delta_I_min', models.FloatField(blank=True, help_text='Intensity change lower bound', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('Delta_I_max', models.FloatField(blank=True, help_text='Intensity change upper bound', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('comments', models.TextField(blank=True, help_text='Remarks')),
                ('sigma', models.FloatField(default=0.0, help_text='Fitted scale/dispersion parameter')),
                ('sigma_min', models.FloatField(blank=True, help_text='Scale/dispersion parameter lower bound', null=True)),
                ('sigma_max', models.FloatField(blank=True, help_text='Scale/dispersion parameter upper bound', null=True)),
                ('xi', models.FloatField(blank=True, help_text='Fitted shape parameter', null=True)),
                ('xi_min', models.FloatField(blank=True, help_text='Shape parameter lower bound', null=True)),
                ('xi_max', models.FloatField(blank=True, help_text='Shape parameter upper bound', null=True)),
                ('y_past', models.PositiveIntegerField(blank=True, help_text='Starting year of the analysis', null=True)),
                ('y_pres', models.PositiveIntegerField(blank=True, help_text='Ending year of the analysis', null=True)),
                ('trend', models.FloatField(blank=True, help_text='Calculated trend', null=True)),
                ('variable_value', models.FloatField(default=0.0, help_text='Variable value for this observation dataset')),
                ('T_return', models.PositiveIntegerField(help_text='Return period (yr)', validators=[django.core.validators.MinValueValidator(0.0)])),
                ('T_return_min', models.PositiveIntegerField(blank=True, help_text='Return period lower bound (yr)', null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('T_return_max', models.PositiveIntegerField(blank=True, help_text='Return period upper bound (yr)', null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('attribution', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='observations', to='exevada.attribution')),
                ('dataset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='exevada.observationdataset')),
            ],
            options={
                'verbose_name_plural': 'observation analyses',
            },
        ),
        migrations.CreateModel(
            name='ModelDataSet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('model_name', models.CharField(help_text='Model output dataset', max_length=128)),
                ('model_description', models.TextField(blank=True, help_text='Model description')),
                ('experiment', models.CharField(help_text='Experiment', max_length=512)),
                ('experiment_description', models.TextField(blank=True, help_text='Experiment description')),
                ('url', models.URLField(blank=True, max_length=512)),
                ('doi', models.CharField(blank=True, help_text='DOI of dataset', max_length=256)),
                ('papers', models.ManyToManyField(blank=True, help_text='Reviewed papers describing the attribution', to='exevada.JournalPaper')),
            ],
        ),
        migrations.CreateModel(
            name='ModelAnalysis',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('PR', models.FloatField(default=0.0, help_text='Probability ratio', validators=[django.core.validators.MinValueValidator(0.0)])),
                ('PR_min', models.FloatField(blank=True, help_text='Probability ratio lower bound', null=True)),
                ('PR_max', models.FloatField(blank=True, help_text='Probability ratio upper bound', null=True)),
                ('Delta_I', models.FloatField(default=0.0, help_text='Intensity change', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('Delta_I_min', models.FloatField(blank=True, help_text='Intensity change lower bound', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('Delta_I_max', models.FloatField(blank=True, help_text='Intensity change upper bound', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('comments', models.TextField(blank=True, help_text='Remarks')),
                ('sigma', models.FloatField(default=0.0, help_text='Fitted scale/dispersion parameter')),
                ('sigma_min', models.FloatField(blank=True, help_text='Scale/dispersion parameter lower bound', null=True)),
                ('sigma_max', models.FloatField(blank=True, help_text='Scale/dispersion parameter upper bound', null=True)),
                ('xi', models.FloatField(blank=True, help_text='Fitted shape parameter', null=True)),
                ('xi_min', models.FloatField(blank=True, help_text='Shape parameter lower bound', null=True)),
                ('xi_max', models.FloatField(blank=True, help_text='Shape parameter upper bound', null=True)),
                ('y_past', models.PositiveIntegerField(blank=True, help_text='Starting year of the analysis', null=True)),
                ('y_pres', models.PositiveIntegerField(blank=True, help_text='Ending year of the analysis', null=True)),
                ('trend', models.FloatField(blank=True, help_text='Calculated trend', null=True)),
                ('seasonal_cycle', models.CharField(choices=[('good', 'Good'), ('bad', 'Bad'), ('reasonable', 'Reasonable')], max_length=32)),
                ('spatial_pattern', models.CharField(choices=[('good', 'Good'), ('bad', 'Bad'), ('reasonable', 'Reasonable')], max_length=32)),
                ('attribution', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='models', to='exevada.attribution')),
                ('dataset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='exevada.modeldataset')),
            ],
            options={
                'verbose_name_plural': 'model analyses',
            },
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Short, descriptive name or title for this event', max_length=128)),
                ('region', models.CharField(help_text='Geographic region where the event was observed', max_length=256)),
                ('start_date', models.DateField(help_text='Event starting date')),
                ('duration', models.PositiveIntegerField(help_text='Duration of the event (nr of days)')),
                ('season', models.CharField(choices=[('DJJ', 'Dec-Feb'), ('MAM', 'Mar-May'), ('JJA', 'Jun-Aug'), ('SON', 'Sep-Nov')], default='DJJ', help_text='Season', max_length=8)),
                ('deaths', models.PositiveIntegerField(blank=True, help_text='Number of deaths', null=True)),
                ('people_affected', models.PositiveIntegerField(blank=True, help_text='Number of people affected', null=True)),
                ('economical_loss', models.DecimalField(blank=True, decimal_places=2, help_text='Estimated economic loss in Meuro', max_digits=12, null=True)),
                ('comments', models.TextField(blank=True, help_text='Remarks')),
                ('image', models.ImageField(blank=True, upload_to='img/')),
                ('image_caption', models.TextField(blank=True, help_text='Image caption')),
                ('map_location', django.contrib.gis.db.models.fields.PointField(help_text='Geographic location of event (for map display)', null=True, srid=4326)),
                ('event_type', models.ForeignKey(help_text='Type of event', on_delete=django.db.models.deletion.CASCADE, to='exevada.eventtype')),
            ],
        ),
        migrations.AddField(
            model_name='attribution',
            name='distribution',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='exevada.distributiontype'),
        ),
        migrations.AddField(
            model_name='attribution',
            name='event',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attributions', to='exevada.event'),
        ),
        migrations.AddField(
            model_name='attribution',
            name='location',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='exevada.location'),
        ),
        migrations.AddField(
            model_name='attribution',
            name='papers',
            field=models.ManyToManyField(blank=True, help_text='Reviewed papers describing the attribution', to='exevada.JournalPaper'),
        ),
        migrations.AddField(
            model_name='attribution',
            name='press_communication',
            field=models.ManyToManyField(blank=True, help_text='Press communication related to the attribution', to='exevada.PressCommunication'),
        ),
        migrations.AddField(
            model_name='attribution',
            name='statistical_method',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='exevada.statisticalmethod'),
        ),
        migrations.AddField(
            model_name='attribution',
            name='variable',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='exevada.attributionvariable'),
        ),
    ]
